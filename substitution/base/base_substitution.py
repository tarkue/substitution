from typing import Dict, List, Iterator, Union

from .base_cycle import BaseCycle


class BaseSubstitution:
    def __init__(self, substition: Dict[int, int]) -> None: ...
    def __iter__(self) -> Iterator[int]: ...
    def __getitem__(self, key: int) -> int: ...
    def __setitem__(self, key: int, value: int) -> None: ...
    def __mul__(self, other: 'BaseSubstitution') -> 'BaseSubstitution': ...    
    def __pow__(self, c: int) -> 'BaseSubstitution': ...
    def __repr__(self) -> str: ...
    def __len__(self) -> int: ...
    def __eq__(self, value: Union['BaseSubstitution', Dict[int, int]]) -> bool: ...
    
    @property
    def cycles(self) -> List[BaseCycle]: ...
    @property
    def order(self) -> int: ...
